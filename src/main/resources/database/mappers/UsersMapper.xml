<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <!-- namespace는 꼭 들어가야될 속성 -->
  <mapper namespace="com.team3.tamagochi.users.UsersDAO">
  	<insert id="registerUsers" parameterType="UsersDTO">
  		INSERT INTO USERS
  		(USER_ID, USER_PW, USER_NAME, USER_NICKNAME, USER_PHONE, USER_EMAIL)
		VALUES
		(#{user_id}, #{user_pw}, #{user_name}, #{user_nickname}, #{user_phone}, #{user_email})
  	</insert>
  	
  	<select id="loginUsers" parameterType="UsersDTO" resultType="UsersDTO">
  		SELECT * FROM USERS
		WHERE USER_ID = #{user_id}
  	</select>
  	
  	<update id="updateUsers" parameterType="UsersDTO">
  		UPDATE USERS SET
  		USER_NAME = #{user_name}, USER_NICKNAME = #{user_nickname},
  		USER_PHONE = #{user_phone}, USER_EMAIL = #{user_email}
		WHERE USER_ID = #{user_id}
  	</update>
  	
  	<update id="changePassword" parameterType="UsersDTO">
  		UPDATE USERS SET USER_PW = #{user_pw}
		WHERE USER_ID= #{user_id}
  	</update>
  	
  	<update id="deleteAccount" parameterType="UsersDTO">
  		UPDATE USERS SET
  		USER_RESIGN = 0
  		WHERE USER_ID = #{user_id} AND USER_PW = #{user_pw}
  	</update>
  	
  	<!-- 내 소지품에서 아이템 가져오는 쿼리문. JOIN을 사용했기 때문에 ResultMap이 필요하다 -->
  	<select id="getInvenList" parameterType="UsersDTO" resultMap="invenResult">
  		SELECT * FROM
  		INVENTORY I
		LEFT JOIN
		ITEM IT
		ON I.ITEM_NUM = IT.ITEM_NUM
		WHERE I.user_id = #{user_id}
  	</select>
  	<resultMap type="ItemDTO" id="invenResult">
  		<id column="ITEM_NUM" property="item_num"></id>
  		<result column="ITEM_NAME" property="item_name"></result>
  		<result column="ITEM_DESCRIPTION" property="item_description"></result>
  		<result column="ITEM_HP" property="item_hp"></result>
  		<result column="ITEM_ATK" property="item_atk"></result>
  		<result column="ITEM_DOD" property="item_dod"></result>
  		
  		<association property="inventoryDTO" javaType="InventoryDTO">
  			<id column="INVENTORY_NUM" property="inventory_num"></id>
  			<result column="USER_ID" property="user_id"/>
  		</association>
  	</resultMap>
  	
  	<!-- 아이템 착용 쿼리-->
  	<!-- 1. 어느 캐릭터에 아이템을 장착시킬 것인지 결정하기 위해 현재 사용중인 pet_num을 구하는 쿼리문 -->
  	<select id="getMyPetNum" parameterType="UsersDTO" resultType="MyPetDTO">
  		SELECT PET_NUM, EQUIP_NUM FROM MY_PET
  		WHERE USER_ID = #{user_id} AND PET_SELECTED = 1
  	</select>
  	
  	<!-- 2. 현재 사용중인 캐릭터에 선택한 아이템 값을 업데이트 해주는 쿼리문 -->
  	<update id="equipItem" parameterType="MyPetDTO">
  		UPDATE MY_PET SET ADD_HP= #{add_hp}, ADD_ATK= #{add_atk}, ADD_DOD= #{add_dod}, EQUIP_NUM = #{equip_num}
		WHERE PET_NUM = #{pet_num}
  	</update>
  	
  	<!-- 3. 해제 버튼 클릭시 해당 컬럼을 0으로 업데이트 해주는 쿼리문 -->
  	<update id="takeOffItem" parameterType="MyPetDTO">
  		UPDATE MY_PET SET ADD_HP= 0, ADD_ATK= 0, ADD_DOD= 0, EQUIP_NUM = null
		WHERE PET_NUM = #{pet_num}
  	</update>
  	
  	
  	
  	<!-- 회원가입시 입력한 id가 중복인지 아닌지 검사하는 JS실행 코드 -->
  	<select id="checkID" resultType="UsersDTO" parameterType="UsersDTO">
  		SELECT USER_ID FROM USERS
		WHERE USER_ID = #{user_id}
  	</select>
  	<!-- 회원 정보 수정시 입력한 패스워드가 올바른 패스워드인지 검사하는 JS실행 코드 -->
  	<select id="checkPW" resultType="UsersDTO" parameterType="UsersDTO">
  		SELECT * FROM USERS
  		WHERE USER_ID = #{user_id} AND USER_PW = #{user_pw}
  	</select>
  	
  	<!-- 이름, 전화번호, 이메일 입력해서 해당 유저의 아이디를 찾는 쿼리문 -->
  	<select id="findID" resultType="UsersDTO" parameterType="UsersDTO">
  		SELECT USER_ID, USER_NAME FROM USERS
  		WHERE USER_NAME = #{user_name} AND USER_EMAIL = #{user_email} AND USER_PHONE = #{user_phone}
  	</select>
  	
  	<!-- 아이디, 이름, 전화번호, 이메일 입력해서 해당 유저의 패스워드를 찾는 쿼리문 -->
  	<select id="findPW" resultType="UsersDTO" parameterType="UsersDTO">
  		SELECT USER_PW, USER_ID FROM USERS
  		WHERE USER_ID = #{user_id} AND USER_NAME = #{user_name} AND
  			USER_EMAIL = #{user_email} AND USER_PHONE = #{user_phone}
  	</select>
  	
  	<!-- 네이버 API로 로그인 했을 때, 첫 로그인 시 회원 정보를 DB에 입력하는 쿼리문 -->
  	<insert id="insertNaverProfile">
  		INSERT INTO USERS
  		(USER_ID, USER_NAME, USER_NICKNAME, USER_PHONE, USER_EMAIL)
		VALUES
		(#{user_id}, #{user_name}, #{user_nickname}, #{user_phone}, #{user_email})
  	</insert>
  	
  	<!-- 해당 유저의 거래 내역 조회 쿼리 -->
  	<select id="getTradeList" parameterType="TransactionDTO" resultMap="TradeList">
  		SELECT i.ITEM_NAME, t.TRANSACTION_DATE, t.TRANSACTION_AMOUNT, t.TRANSACTION_TYPE
  		FROM TRANSACTION t
		INNER JOIN ITEM i
		ON (t.ITEM_NUM = i.ITEM_NUM)
		WHERE t.USER_ID =#{user_id}
  	</select>
  	<resultMap type="TransactionDTO" id="TradeList">
  		<id column="TRANSACTION_NUM" property="transaction_num"></id>
  		<result column="USER_ID" property="user_id"></result>
  		<result column="ITEM_NUM" property="item_num"></result>
  		<result column="TRANSACTION_DATE" property="transaction_date"></result>
  		<result column="TRANSACTION_AMOUNT" property="transaction_amount"></result>
  		<result column="TRANSACTION_TYPE" property="transaction_type"></result>
  		
  		<association property="itemDTO" javaType="ItemDTO">
			<result column="ITEM_NAME" property="item_name"></result>  		
  		</association>
  	</resultMap>
  	
  	<!-- transaction type에 따른 검색 리스트 -->
  	<select id="selectType" parameterType="TransactionDTO" resultMap="TradeList">
  		SELECT i.ITEM_NAME, t.TRANSACTION_DATE, t.TRANSACTION_AMOUNT, t.TRANSACTION_TYPE
  		FROM TRANSACTION t
		INNER JOIN ITEM i
		ON (t.ITEM_NUM = i.ITEM_NUM)
		WHERE t.USER_ID =#{user_id} AND t.TRANSACTION_TYPE = #{transaction_type}
  	</select>
  	<!-- transaction amount에 따른 검색 리스트 -->
  	<select id="selectAmount" parameterType="TransactionDTO" resultMap="TradeList">
  		SELECT i.ITEM_NAME, t.TRANSACTION_DATE, t.TRANSACTION_AMOUNT, t.TRANSACTION_TYPE
  		FROM TRANSACTION t
		INNER JOIN ITEM i
		ON (t.ITEM_NUM = i.ITEM_NUM)
		WHERE t.USER_ID =#{user_id}
		<if test="transaction_amount == 1">
			ORDER BY TRANSACTION_AMOUNT DESC
		</if>
		<if test="transaction_amount == 2">
			ORDER BY TRANSACTION_AMOUNT ASC
		</if>
		
		
  	</select>
  	
  	
  	
  	
  	
  	
  	<!-- 회원가입시 기본 캐릭터 4개를 만들어주는 쿼리문 -->
  	<!-- 캐릭터 하나당 쿼리문 하나를 작성했는데, 더 좋은 방법 알면 제보 바람 -->
  	<insert id="setDefaultCharacter1" parameterType="UsersDTO">
  		INSERT INTO MY_PET
  		(PET_NUM, USER_ID, ITEM_NUM, PET_NAME, PET_SPC, PET_WASHROOM,
  			PET_EXP,PET_LEVEL, PET_HP, PET_ATK, PET_DOD, PET_POP, PET_HUNGRY, PET_SELECTED)
		VALUES
		(PET_SEQ.NEXTVAL, #{user_id}, 1, '인간', '인간', 0,
			0, 1, 50, 20, 20, 0, 10, 1)
  	</insert>
  	<insert id="setDefaultCharacter2" parameterType="UsersDTO">
  		INSERT INTO MY_PET
  		(PET_NUM, USER_ID, ITEM_NUM, PET_NAME, PET_SPC, PET_WASHROOM,
  			PET_EXP,PET_LEVEL, PET_HP, PET_ATK, PET_DOD, PET_POP, PET_HUNGRY)
		VALUES
		(PET_SEQ.NEXTVAL, #{user_id}, 2, '개발자', '개발자', 0,
			0, 1, 50, 20, 20, 0, 10)
  	</insert>
  	<insert id="setDefaultCharacter3" parameterType="UsersDTO">
  		INSERT INTO MY_PET
  		(PET_NUM, USER_ID, ITEM_NUM, PET_NAME, PET_SPC, PET_WASHROOM,
  			PET_EXP,PET_LEVEL, PET_HP, PET_ATK, PET_DOD, PET_POP, PET_HUNGRY)
		VALUES
		(PET_SEQ.NEXTVAL, #{user_id}, 3, '오크', '오크', 0,
			0, 1, 50, 20, 20, 0, 10)
  	</insert>
  	<insert id="setDefaultCharacter4" parameterType="UsersDTO">
  		INSERT INTO MY_PET
  		(PET_NUM, USER_ID, ITEM_NUM, PET_NAME, PET_SPC, PET_WASHROOM,
  			PET_EXP,PET_LEVEL, PET_HP, PET_ATK, PET_DOD, PET_POP, PET_HUNGRY)
		VALUES
		(PET_SEQ.NEXTVAL, #{user_id}, 4, '박쥐', '박쥐', 0,
			0, 1, 50, 20, 20, 0, 10)
  	</insert>
  
  </mapper>
