<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <!-- namespace는 꼭 들어가야될 속성 -->
  <mapper namespace="com.team3.tamagochi.friend.FriendDAO">
  
  	<!-- 친구 만들기 -->
  	<insert id="makeFriends" parameterType="FriendDTO">
  		INSERT INTO FRIEND VALUES (FRIEND_SEQ.NEXTVAL, #{user_id}, #{friend_id})
  	</insert>
  	
  	<!-- 친구 리스트 -->
  	<select id="getFriendList" parameterType="FriendDTO" resultMap="detailFriend">
  		SELECT u.*, f.*
			FROM USERS u 
			LEFT JOIN
			FRIEND f 
			ON u.USER_ID = f.USER_ID 
		WHERE u.USER_ID =#{user_id}
  	</select>
  	
  	<!-- 친구 디테일 -->
  	<select id="getFriendDetail" parameterType="FriendDTO" resultMap="detailFriend">
  		SELECT u.*, f.*
			FROM USERS u 
			LEFT JOIN
			FRIEND f 
			ON u.USER_ID = f.FRIEND_ID 
		WHERE f.FRIEND_NUM = #{friend_num}
  	</select>
  	
  	<resultMap type="UsersDTO" id="detailFriend">
  		<id column="USER_ID" property="user_id"/>
  			<result column="USER_PW" property="user_pw"/>
  			<result column="USER_NAME" property="user_name"/>
  			<result column="USER_NICKNAME" property="user_nickname"/>
  			<result column="USER_PHONE" property="user_phone"/>
  			<result column="USER_EMAIL" property="user_email"/>
  			<result column="USER_AUTH" property="user_auth"/>
  			<result column="USER_RESIGN" property="user_resign"/>
  
  		<collection property="friendDTO" javaType="java.util.List" ofType="FriendDTO">
  			<id column="FRIEND_NUM" property="friend_num"/>
  			<result column="USER_ID" property="user_id"/>
  			<result column="FRIEND_ID" property="friend_id"/>
  		</collection>
  	</resultMap>
  	
  	<!-- 친구 삭제 -->
  	<delete id="deleteFriend" parameterType="FriendDTO">
  		DELETE FROM FRIEND WHERE USER_ID = #{user_id} AND FRIEND_ID=#{friend_id}
  	</delete>
  	
  	<!-- 주소창으로 남의 친구창 들어가는걸 방지하기 위해 친구 목록에 등록되어 있는 user_id를 가져오는 쿼리 -->
  	<select id="getFriendID" parameterType="FriendDTO" resultType="FriendDTO">
  		SELECT * FROM FRIEND
  		WHERE FRIEND_NUM= #{friend_num}
  	</select>
  	
  	<!-- 내 소지품에서 아이템 가져오는 쿼리문. JOIN을 사용했기 때문에 ResultMap이 필요하다 -->
  	<select id="getInvenList" parameterType="UsersDTO" resultMap="invenResult">
  		SELECT * FROM
  		INVENTORY I
		LEFT JOIN
		ITEM IT
		ON I.ITEM_NUM = IT.ITEM_NUM
		WHERE I.user_id = #{user_id}
  	</select>
  	<resultMap type="ItemDTO" id="invenResult">
  		<id column="ITEM_NUM" property="item_num"></id>
  		<result column="ITEM_NAME" property="item_name"></result>
  		<result column="ITEM_DESCRIPTION" property="item_description"></result>
  		<result column="ITEM_HP" property="item_hp"></result>
  		<result column="ITEM_ATK" property="item_atk"></result>
  		<result column="ITEM_DOD" property="item_dod"></result>
  		
  		<association property="inventoryDTO" javaType="InventoryDTO">
  			<id column="INVENTORY_NUM" property="inventory_num"></id>
  			<result column="USER_ID" property="user_id"/>
  		</association>
  	</resultMap>
  	
  	<!-- 선물 받는 쪽 -->
  	<insert id="takeGift" parameterType="InventoryDTO">
  		INSERT INTO INVENTORY VALUES (INVEN_SEQ.NEXTVAL, #{item_num}, #{user_id})
  	</insert>
  	
  	<!-- 선물 주는 쪽 -->
  	<delete id="sendGift" parameterType="InventoryDTO">
  		DELETE INVENTORY WHERE ITEM_NUM = #{item_num} AND USER_ID = #{user_id}
  	</delete>
  	
  	<!-- 선물 받는 쪽에서 알람 -->
  	<insert id="sendAlarm" parameterType="AlarmDTO">
  		INSERT INTO ALARM VALUES (ALARM_SEQ.NEXTVAL, #{user_id}, #{item_num}, #{alarm_sender}, SYSDATE, #{alarm_sender}||'이/가 선물을 보냈습니다.', 0)
  	</insert>
  	
  	<!-- 친구맺으면 받는 쪽에서 알람 -->
  	<insert id="sendFriendAlarm" parameterType="AlarmDTO">
  		INSERT INTO ALARM VALUES (ALARM_SEQ.NEXTVAL, #{user_id}, #{item_num}, #{alarm_sender}, SYSDATE, #{alarm_sender}||'이/가 친구를 맺었습니다.', 0)
  	</insert>
  	
  	<!-- 알람 확인 -->
  	<update id="checkAlarm" parameterType="AlarmDTO">
  		UPDATE ALARM SET CHECKED = 1 WHERE ALARM_NUM = #{alarm_num}
  	</update>
  	
  	<sql id="searchSql">
				
			AND ALARM_NUM > 0	
			<choose>
				<when test="kind == 'alarm_sender'">
					AND ALARM_SENDER LIKE '%'||#{search}||'%'
					ORDER BY ALARM_RECEIVED_DATE DESC
				</when>
				<otherwise>
					AND ALARM_CONTENTS LIKE '%'||#{search}||'%'
					ORDER BY ALARM_RECEIVED_DATE DESC
				</otherwise>
				
			</choose>
		
	</sql>
  	
  	
  	<!-- 알람 리스트 -->
  	<select id="getAlarmListAll" parameterType="AlarmDTO" resultType="AlarmDTO">
  		SELECT * FROM alarm WHERE USER_ID = #{user_id} 
		<include refid="searchSql"/>
		
  	</select>
  	
  	<!-- 상위 5개 -->
  	<select id="getAlarmList" parameterType="AlarmDTO" resultType="AlarmDTO">
  		SELECT * FROM 
			(
			SELECT * FROM alarm 
			WHERE USER_ID = #{user_id}
			ORDER BY ALARM_RECEIVED_DATE DESC
			) 
		WHERE ROWNUM &lt; 6 
		
  	</select>
  	
  </mapper>
